/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef INK_ENGINE_SCENE_PAGE_PAGE_MANAGER_H_
#define INK_ENGINE_SCENE_PAGE_PAGE_MANAGER_H_

#include <memory>

#include "third_party/glm/glm/glm.hpp"
#include "ink/engine/camera/camera.h"
#include "ink/engine/public/types/status.h"
#include "ink/engine/scene/graph/scene_graph.h"
#include "ink/engine/scene/page/page_info.h"
#include "ink/engine/scene/page/page_layout_strategy.h"
#include "ink/engine/scene/page/page_properties_notifier.h"
#include "ink/engine/service/dependencies.h"
#include "ink/engine/util/security.h"

namespace ink {

// Keeps track of pages and manipulates their transforms (via a registered
// strategy). This class is not thread safe and should be manipulated in the
// main thread.
class PageManager {
 public:
  using SharedDeps = service::Dependencies<SceneGraph, Camera>;

  // Generates a new page manager using the current scene graph. Registers
  // a no-op layout strategy (all pages are laid on top of each other).
  PageManager(std::shared_ptr<SceneGraph> scene_graph,
              std::shared_ptr<Camera> camera);

  virtual ~PageManager() {}

  // Returns true if we are in multi-page mode (at least one page was
  // registered).
  virtual bool MultiPageEnabled() const;

  // Returns the number of pages the page manager knows about.
  virtual int GetNumPages() const;

  // Returns true if the page manager needs to be re-layed out.
  bool IsDirty() const;

  // Returns true if this page manager knows about the group.
  bool GroupExists(const GroupId& group_id) const;

  // Sets the layout strategy. Must call GenerateLayout before using any
  // Get* functions after this call.
  void SetLayoutStrategy(std::unique_ptr<PageLayoutStrategy> strategy);

  PageLayoutStrategy* GetLayoutStrategy() const;

  // Adds a page to the manager with the given dimensions (width, height). Must
  // call GenerateLayout before using any Get* functions after this call. This
  // will create a new UUID/GroupId to be used for the page.
  S_WARN_UNUSED_RESULT Status AddNewPageWithDimensions(glm::vec2 dimensions);
  // Adds a page with given per page properties from the snapshot proto.
  // The UUID should already be in the scene.
  S_WARN_UNUSED_RESULT Status AddPageFromProto(
      const ink::proto::PerPageProperties& unsafe_per_page_properties);

  // Return the GroupId associated with a page index (0 based).
  GroupId GetPageGroupId(int page) const;

  // Resets this manager such that all page information is discarded.
  // The layout strategy is left unchanged.
  void Clear();

  // Uses the registered strategy to lay out the pages. For every page,
  // updates the scene graph with the new transform information. This is
  // a no-op if no pages have been added or the layout strategy hasn't
  // changed.
  void GenerateLayout();

  // The following functions return the registered page information from
  // AddPage, with the group id and uuid filled in.
  const PageSpec& GetPageSpec(int page) const;
  const PageSpec& GetPageSpec(GroupId id) const;

  // The following Get* functions require that GenerateLayout must have been
  // called before this function if pages have been added or the layout changed.

  // Get the page information with the layout transform applied for a given
  // page.
  const PageInfo& GetPageInfo(int page) const;
  const PageInfo& GetPageInfo(GroupId id) const;

  // Return the first page (in page index order) that intersects a given
  // region.
  GroupId GetPageGroupForRect(Rect region) const;

  // Return the full bounds of the layout registered.
  Rect GetFullBounds() const;

 protected:
  // For faking.
  PageManager() {}

 private:
  std::shared_ptr<SceneGraph> scene_graph_;
  std::shared_ptr<Camera> camera_;
  std::unique_ptr<PageLayoutStrategy> strategy_;
  // The page specifications (uiud, group id, and dimensions) that were
  // added to this manager.
  std::vector<PageSpec> page_specs_;
  // A group to page index lookup.
  std::unordered_map<GroupId, uint64_t, ElementIdHasher> group_to_page_index_;
  // The full bounds represented by laying out the pages.
  Rect full_bounds_;
  // The transformed page information, 1:1 with page specs, as generated by
  // the layout strategy.
  PageLayoutStrategy::PageInfoList page_info_;
  bool dirty_ = false;
};

}  // namespace ink
#endif  // INK_ENGINE_SCENE_PAGE_PAGE_MANAGER_H_
