// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package ink.proto;

import "ink/proto/animations.proto";
import "ink/proto/document.proto";
import "ink/proto/elements.proto";
import "ink/proto/geometry.proto";
import "ink/proto/text.proto";

option javascript_package = "ink.proto";
option java_package = "com.google.ink.proto";
option java_outer_classname = "SEngineProto";

// If you reorder or delete any fields in this proto, make sure to regenerate
// prebuild sketchology shared libs.
message Command {
  optional Viewport set_viewport = 1;
  optional ToolParams tool_params = 2;
  optional AddPath add_path = 3;
  optional CameraPosition camera_position = 4;
  optional ink.proto.Rect page_bounds = 5;
  optional ImageExport image_export = 6;
  optional FlagAssignment flag_assignment = 7;
  optional ink.proto.ElementTransformMutations set_element_transforms = 8;
  optional AddElement add_element = 9;
  optional ink.proto.BackgroundImageInfo background_image = 10;
  optional BackgroundColor background_color = 11;
  optional OutOfBoundsColor set_out_of_bounds_color = 12;
  optional ink.proto.Border set_page_border = 13;
  optional SInputStream send_input_stream = 14;
  optional SequencePoint sequence_point = 15;
  optional SetCallbackFlags set_callback_flags = 16;
  optional CameraBoundsConfig set_camera_bounds_config = 17;
  // This will cause the edit tool to deselect its elements. It has no effect on
  // the pusher tool.
  optional NoArgCommand deselect_all = 18;
  optional ImageRect add_image_rect = 19;
  optional NoArgCommand clear = 21;
  optional NoArgCommand remove_all_elements = 22;
  optional NoArgCommand undo = 23;
  optional NoArgCommand redo = 24;
  optional EvictImageData evict_image_data = 25;
  // 26 is unused
  optional NoArgCommand commit_crop = 27;
  optional ElementAnimation element_animation = 28;
  optional GridInfo set_grid = 29;
  optional NoArgCommand clear_grid = 30;
  optional ink.proto.Rect set_crop = 31;
  optional ink.proto.text.AddText add_text = 32;
  optional RemoveElementsCommand remove_elements = 33;
  optional ink.proto.text.UpdateText update_text = 34;
  optional ink.proto.text.BeginTextEditing begin_text_editing = 35;
  optional SetMouseWheelBehavior set_mouse_wheel_behavior = 36;
  optional ink.proto.ElementVisibilityMutations set_element_visibilities = 37;
  optional ink.proto.ElementOpacityMutations set_element_opacities = 38;
  optional ink.proto.ElementZOrderMutations set_z_orders = 39;
  optional ink.proto.RenderingStrategy set_rendering_strategy = 40;
}

// This is currently only used for debugging.
message CommandList {
  repeated Command commands = 1;
}

message NoArgCommand {}

message RemoveElementsCommand {
  repeated string uuids_to_remove = 1;
}

message EvictImageData {
  optional string uri = 1;
}

message Viewport {
  optional uint32 width = 1;
  optional uint32 height = 2;
  optional float ppi = 3;

  // Set the screen rotation in degrees if it's mismatched from the actual
  // device orientation.  Must be a multiple of 90.
  //
  // This is done for hardware overlay support, which requires the canvas
  // orientation to match the display pixel layout, not the physical screen
  // layout.
  optional uint32 screen_rotation = 4;
}

message CameraPosition {
  // The position, in world-coordinates, at the center of the viewport.
  optional Point world_center = 1;

  // The width and height of the visible area, in world-units. Note that if the
  // given width and height don't match the aspect ratio of the viewport, either
  // the width or the height will be increased to preserve the aspect ratio.
  // These values must be positive.
  optional float world_width = 2;
  optional float world_height = 3;

}

enum RenderingStrategy {
  UNKNOWN_RENDERER = 0;
  BUFFERED_RENDERER = 1;
  DIRECT_RENDERER = 2;
}

message ImageExport {
  // The maximum that either dimension of the exported image will be (e.g. 1024
  // will result in either 1024x768 or 768x1024 depending on the aspect ratio of
  // the document).
  optional uint32 max_dimension_px = 1 [default = 1024];
  optional bool should_draw_background = 2 [default = true];
  // If provided, exported image will be of the given world rectangle. If
  // omitted, will default to the document bounds if they exist, else current
  // MBR of the scene.
  optional ink.proto.Rect world_rect = 3;
  // If provided, export image will render only elements in the specified layer.
  optional uint32 layer_index = 4;
}

// Crossfade from rgba_from to rgba (given in ToolParams).
// Shrink/Expand from size * dilation_from to size (also in ToolParams).
message LinearPathAnimation {
  optional uint32 rgba_from = 1;  // non-premultiplied
  optional double rgba_seconds = 2;
  optional float dilation_from = 3;
  optional double dilation_seconds = 4;
}

// Parameters for defining the stroke width of the LINE tool.
message LineSize {
  // Desired stroke width, with units described below.
  optional float stroke_width = 7;
  optional SizeType units = 8 [default = WORLD_UNITS];
  enum SizeType {
    UNKNOWN_SIZE = 0;
    WORLD_UNITS = 1;
    POINTS = 2;  // Typographic points aka 1/72 inch on screen at default zoom.
    // Device-independent pixels (1/160 in), regardless of zoom level (even
    // after viewport changes).
    ZOOM_INDEPENDENT_DP = 3;

    // Percent sizes have a stroke_width in the range [0, 1]. 0 means the
    // smallest generally-useful size for the brush while 1.0 is the largest
    // generally-useful size for the brush.
    //
    // Within the engine, this is not assumed to be a linear interpolation of
    // sizes. Instead the curve is expected to expose a useful variety of sizes.
    // Often this means faster growth on the high end of the curve, but nothing
    // should be assumed, as it's up to the brush.
    //
    // This can be set in world coordinates (on-screen size varies with zoom)
    // or in zoom-independent screen coordinates. If the size is set in world
    // coordinates, the size "generally-useful size" is understood to mean
    // useful at default zoom.
    PERCENT_WORLD = 4;
    PERCENT_ZOOM_INDEPENDENT = 5;
  }

  // When setting size with a SizeType PERCENT_*, the engine may want to choose
  // a size appropriate for web clients (generally desktops/laptops) instead of
  // mobile devices.
  optional bool use_web_sizes = 9;
}

// Parameters to control the behavior of the PUSHER tool.
message PusherToolParams {
  optional bool manipulate_stickers = 1;
  optional bool manipulate_text = 2;
}

// Brushes in this list can be sent to SEngine's getLineToolParams(brush)
// which will return the proper LineToolParams for that type of brush.
enum BrushType {
  UNKNOWN_BRUSH = 0;
  CALLIGRAPHY = 1;
  INKPEN = 2;
  MARKER = 3;
  BALLPOINT = 4;
  ERASER = 6;
  HIGHLIGHTER = 8;
  CHISEL = 10;  // Chisel tip, best used with stylus tilt/orientation.
  // This brush acts like a marker outside of pen mode, ballpoint inside pen
  // mode.
  BALLPOINT_IN_PEN_MODE_ELSE_MARKER = 11;
  PENCIL = 12;
  CHARCOAL = 13;
}

message ToolParams {
  optional ToolType tool = 1;
  enum ToolType {
    UNKNOWN = 0;
    LINE = 1;
    EDIT = 2;
    // Eraser that removes the entire element.
    MAGIC_ERASE = 3;
    QUERY = 4;
    NOTOOL = 5;  // Single-finger pan.
    FILTER_CHOOSER = 6;
    PUSHER = 7;
    CROP = 8;
    TEXT_HIGHLIGHTER_TOOL = 9;
    // Eraser that removes only the parts of the element that it touches.
    // WARNING: This tool will not function if the KEEP_MESHES_IN_CPU_MEMORY is
    // not enabled.
    // WARNING: This is still under development (b/77467755).
    STROKE_EDITING_ERASER = 10;
    SMART_HIGHLIGHTER_TOOL = 11;
  }

  optional uint32 rgba = 2;  // not premultiplied
  // Stroke size for LINE, SMART_HIGHLIGHTER_TOOL and STROKE_EDITING_ERASER.
  optional LineSize line_size = 3;
  optional PusherToolParams pusher_tool_params = 4;
  optional BrushType brush_type = 5;

  optional LinearPathAnimation linear_path_animation = 6;
}

enum Flag {
  UNKNOWN = 0;
  READ_ONLY_MODE = 1;
  ENABLE_PAN_ZOOM = 2;
  ENABLE_ROTATION = 3;
  // Allows the engine to set ENABLE_PEN_MODE to true if pen input is detected.
  ENABLE_AUTO_PEN_MODE = 4;
  // Only allows drawing with pen/mouse.  Touch will pan with one finger.  If
  // this is enabled by the engine when ENABLE_AUTO_PEN_MODE is set, subsequent
  // flag assignments are honored and the engine will never enable the flag for
  // that session.  Flag changes are also dispatched on Host to allow UI to
  // represent the state of this flag, even when the engine changes it.
  ENABLE_PEN_MODE = 5;
  // Engine attempts to conserve memory by cutting features. For
  // consistent behavior, set this only on startup, before elements
  // are added to scene.
  LOW_MEMORY_MODE = 6;
  // Draw the predicted tip of strokes at full opacity (the same as
  // the rest of the stroke).
  OPAQUE_PREDICTED_SEGMENT = 7;
  // When crop mode is enabled, the crop box is shown on screen and can be
  // manipulated regardless of the current tool. This should not be used in
  // conjunction with CropTool.
  CROP_MODE_ENABLED = 8;
  // Draw lines around zoom tiles for debugging.
  DEBUG_TILES = 10;
  // Draw triangle meshes for the most-recent line.
  DEBUG_LINE_TOOL_MESH = 11;
  // Prevent panning and zooming outside of the page.
  STRICT_NO_MARGINS = 12;
  // When this flag is enabled, element meshes will be stored in both CPU and
  // GPU memory. When disabled (the default), they will be stored only in GPU
  // memory.
  // NOTE: This flag is not compatible with low-memory mode. If both flags are
  // enabled, low-memory mode will take precedence, and this will be ignored.
  // WARNING: This flag must be set before elements are added to the scene.
  KEEP_MESHES_IN_CPU_MEMORY = 13;
  // When this flag is true, the camera panning has momentum.
  ENABLE_FLING = 14;
  // When this flag is true, the host is permitted to SEngine::SetCameraPosition
  // without any constraints applied. This flag overrides ENABLE_PAN_ZOOM, and
  // implies !ENABLE_PAN_ZOOM.
  ENABLE_HOST_CAMERA_CONTROL = 15;
  // When this flag is true, the engine will apply a motion blur effect during
  // panning and zooming, on platforms that support it. True by default.
  ENABLE_MOTION_BLUR = 16;
  // When enabled, the edit tool selection box will have handles that allow the
  // user to resize the selected elements without needing multitouch input (for
  // example, using a mouse).
  ENABLE_SELECTION_BOX_HANDLES = 17;
  // Allow the root renderer to only draw the changed area around the line tool.
  // This should only be used with a single buffered drawing surface that
  // preserves its contents between frames, e.g. WebGL with
  // preserveDrawingBuffer: true;
  ENABLE_PARTIAL_DRAW = 18;
  // This flag is no longer used.
  reserved 9;
}
//     ../engine/settings/flags.h,
//     ../engine/settings/flags.cc,
//     ../public/js/embind.cc)

message FlagAssignment {
  optional Flag flag = 1;
  optional bool bool_value = 2;
}

message AddElement {
  optional ink.proto.ElementBundle bundle = 1;

  // If set, the Element will be added with z-index immediately below the
  // element with the specified UUID.
  optional string below_element_with_uuid = 2;
}

message OutOfBoundsColor {
  optional uint32 rgba = 1;  // non-premultiplied
}

// A simple input stream holding multiple proto::SInputs.
message SInputStream {
  // Initial camera values. All elements of input will be interpreted
  // with respect to these values.
  optional uint32 screen_width = 1;
  optional uint32 screen_height = 2;
  optional float screen_ppi = 3;

  repeated SInput input = 4;
}

// A simple input holding the args to SEngine::dispatchInput
message SInput {
  enum InputType {
    UNKNOWN = 0;
    MOUSE = 1;
    TOUCH = 2;
    PEN = 3;
    ERASER = 4;
  }
  optional InputType type = 1;
  optional uint32 id = 2;
  optional uint32 flags = 3;
  optional double time_s = 4;  // in seconds

  // WARNING These coordinates assume (0,0) in the top left of the screen!
  // x increases to the right and y increases going down.
  optional float screen_pos_x = 5;
  optional float screen_pos_y = 6;
  optional float pressure = 7;

  // Use wheel_delta_x and wheel_delta_y.
  optional float deprecated_wheel_delta = 8 [deprecated = true];

  optional float tilt = 9;
  optional float orientation = 10;

  // For wheel events.
  optional float wheel_delta_x = 11;
  optional float wheel_delta_y = 12;
}

// A serialized stream of events. This is more extensible than
// SInputStream. To add new input types, add a variant to
// PlaybackEvent.event.
message PlaybackStream {
  // Initial camera settings. It is probably an error if this field is
  // not populated.
  optional CameraSettings initial_camera = 1;

  // Stream of events to play back.
  repeated PlaybackEvent events = 2;
}

// Camera settings for a PlaybackStream. The values in this message
// can be used to reconstruct the screen -> world transform under
// which serialized SInput messages were captured.
message CameraSettings {
  optional Viewport viewport = 1;
  optional CameraPosition position = 2;
}

// Union of event types that can occur in a PlaybackStream.
message PlaybackEvent {
  oneof event {
    // Simple user input.
    SInput sinput = 1;
    // The camera observed by an input handler. When this event is
    // present, the next event in the stream should be the one that
    // observed these camera settings.
    //
    // Standard practice is to emit a camera_on_input event when only
    // a change in the camera is detected. For example, if, input
    // event N had a camera configuration identical to the playback
    // stream's initial camera settings, and input event M > N was
    // noted to have a different camera configuration, with no
    // intervening input events, then the playback stream will have a
    // camera_on_input message immediately preceding input event M.
    CameraSettings camera_on_input = 2;
  }
}

// DEPRECATED
message SimulatedInput {
  // Coordinates are in the typical platform input orientation of the screen:
  // (0,0) in top left, x increasing right and y increasing down.
  repeated float xs = 1;
  repeated float ys = 2;
  repeated double ts_secs = 3;
  optional ink.proto.SourceDetails source_details = 4;
}

message SequencePoint {
  optional int32 id = 1;
}

message SetCallbackFlags {
  optional ink.proto.SourceDetails source_details = 1;
  optional ink.proto.CallbackFlags callback_flags = 2;
}

message EngineState {
  // World coordinates of where the camera is currently looking.
  optional CameraPosition camera_position = 1;

  // Size of the document in world coordinates, or (0,0,0,0) if document is
  // infinite.
  optional ink.proto.Rect page_bounds = 2;

  // True if there are elements currently being selected by the edit tool. Note
  // that this will not be true if the pusher tool is being used.
  optional bool selection_is_live = 3;

  // Minimum bounding rectangle of all the scene's elements, in world
  // coordinates. (0,0,0,0) if scene is empty.
  optional ink.proto.Rect mbr = 4;
}

message CameraBoundsConfig {
  optional float margin_left_px = 1;
  optional float margin_right_px = 2;
  optional float margin_bottom_px = 3;
  optional float margin_top_px = 4;
  // The fraction of the screen that is allowed to be empty when we are zoomed
  // out beyond the document bounds
  optional float fraction_padding = 5 [default = 0.1];
}

message ImageInfo {
  enum AssetType {
    // Default is suitable for most cases, including backgrounds and text.
    DEFAULT = 0;
    // Nine-patch images for the page border.
    BORDER = 1;
    // Images that use mesh-from-transparency hit-testing.
    STICKER = 2;
    // Images used for repeated grids. The image itself must be square, and the
    // length of the side (in pixels) must be a power of 2.
    GRID = 3;
    // Images used for tiled-texture brushes. The same image-size constraints
    // hold as for images of type GRID.
    TILED_TEXTURE = 4;
  }

  optional string uri = 1;
  optional AssetType asset_type = 2 [default = DEFAULT];
}

// Add a rect with the given bitmap to the scene.
message ImageRect {
  optional ink.proto.Rect rect = 1;
  optional string bitmap_uri = 2;
  optional ElementAttributes attributes = 3;

  // Counterclockwise rotation about object center.
  optional float rotation_radians = 4;

  // The parent to use for this image rect. If unset, will attach
  // this rect to the root of the canvas.
  optional string group_uuid = 5;
}

message AddPath {
  optional ink.proto.Path path = 1;

  // If unset, we will automatically generate a uuid.
  optional string uuid = 2;

  // The parent to use for this path. If unset, will attach
  // this path to the root of the canvas.
  optional string group_uuid = 3;
}

// Data sent to the client when the pusher tool is moving an element. Each
// movement frame will have one of these, with a varying number of pointers.
// When the last pointer goes up, a final PusherPositionUpdate must be
// sent with an empty pointer_location list.
message PusherPositionUpdate {
  // The UUID of the element being moved.
  optional string uuid = 1;
  // The location (in screen coordinates) of each pointer that is currently
  // down.
  repeated Point pointer_location = 2;
}

// Query data list contains elements and some additional data about their
// current state in the scene.
message ElementQueryData {
  repeated ElementQueryItem item = 1;
  // Location of the UP event for the query in world coordinates.
  optional Point up_world_location = 2;
  // Location of the DOWN event for the query in world coordinates.
  optional Point down_world_location = 3;
}
message ElementQueryItem {
  optional string uuid = 1;
  optional Rect world_bounds = 2;
  optional string uri = 3;
  optional text.Text text = 4;
}

message SelectionState {
  optional bool anything_selected = 1;
}

// ToolEvent describes an event in a sketchology tool that is emitted to the
// client. Only one field is expected to be populated, depending on the event.
message ToolEvent {
  // The pusher tool has moved an object in the scene.
  optional PusherPositionUpdate pusher_position_update = 1;
  // An item has been clicked or selected by the pusher or query tool
  optional ElementQueryData element_query_data = 2;
  // The selection tool has selected or unselected something.
  optional SelectionState selection_state = 3;
}

enum MouseWheelBehavior {
  // Mouse wheel zooms, ctrl+mouse wheel scrolls
  ZOOMS = 1;
  // Mouse wheel scrolls, ctrl+mouse wheel zooms
  SCROLLS = 2;
}

// Set the effect of mouse wheel scroll events.
message SetMouseWheelBehavior {
  optional MouseWheelBehavior behavior = 1;
}

// The full state of the ink engine's layers.
message LayerState {
  message Layer {
    optional string uuid = 1;
    optional bool visibility = 2;
    optional float opacity = 3;
  }

  repeated Layer layers = 1;

  optional string active_layer_uuid = 2;
}

// A LayoutSpec how pages should be arranged when editing a multipage document.
enum LayoutStrategy {
  UNKNOWN_STRATEGY = 0;
  VERTICAL = 1;
  HORIZONTAL = 2;
}
message LayoutSpec {
  optional LayoutStrategy strategy = 1 [default = VERTICAL];
  optional float spacing_world = 2;
}

message Cursor {
  enum CursorType {
    DEFAULT = 0;
    BRUSH = 1;
    CROSSHAIR = 2;
    GRAB = 3;
    GRABBING = 4;
    MOVE = 5;
    RESIZE_EW = 6;
    RESIZE_NS = 7;
    RESIZE_NESW = 8;
    RESIZE_NWSE = 9;
    TEXT = 10;
  }

  optional CursorType type = 1;
  // The color of the brush.  Ignored for non-brush cursor types.
  optional fixed32 brush_rgba = 2;  // non-premultiplied
  // The radius of the brush, in screen pixels.  Ignored for non-brush cursor
  // types.
  optional float brush_size = 3;
}
//     ../engine/input/cursor.h,
//     ../engine/input/cursor.cc,
//     ../../../research/ink/web/js/cursor_updater.js)
