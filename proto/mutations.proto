// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Messages to represent an Ink scene as a sequence of mutations.
syntax = "proto2";

package ink.proto.mutations;

import "ink/proto/document.proto";
import "ink/proto/elements.proto";
import "ink/proto/geometry.proto";

option javascript_package = "ink.proto.mutations";
option java_package = "com.google.ink.proto";
option java_outer_classname = "MutationsProto";

// A change to an Ink scene. This is the atomic unit of change given to clients,
// or applied to documents.
message Mutation {
  // A Chunk represents a single scene change--one element being removed, or
  // added, or moved, etc.
  message Chunk {
    oneof mutation_type {
      SetBackgroundColor set_background_color = 1;
      SetBackgroundImage set_background_image = 2;
      SetWorldBounds set_world_bounds = 3;
      AddElement add_element = 4;
      RemoveElement remove_element = 5;
      SetElementTransform set_element_transform = 6;
      SetBorder set_border = 7;
      SetGrid set_grid = 8;
      SetVisibility set_visibility = 9;
      SetOpacity set_opacity = 10;
      ChangeZOrder change_z_order = 11;
    }
  }
  repeated Chunk chunk = 1;
}

message MutationResult {
  enum Status {
    UNKNOWN = 0;
    SUCCESS = 1;
    SUCCESS_WITH_MERGE_CONFLICT_RESOLVED =
        2;               // Any unapplied or partially-applied mutations.
    BAD_MUTATION = 3;    // Malformed input.
    INTERNAL_ERROR = 4;  // Programming error in this class.
  }
  optional .ink.proto.Snapshot snapshot = 1;
  optional Status status = 2;
}
//     ../public/mutations/mutation_applier.cc,
//     ../engine/util/dbg/str.h,
// )

// Set the scene background color.
message SetBackgroundColor {
  optional uint32 rgba_non_premultiplied = 1;
}

// Set the scene background image.
message SetBackgroundImage {
  optional BackgroundImageInfo background_image_info = 1;
}

// Set the scene's bounds.
message SetWorldBounds {
  optional Rect bounds = 1;
}

// Set the scene's border.
message SetBorder {
  optional Border border = 1;
}

// Set the scene's grid.
message SetGrid {
  optional GridInfo grid = 1;
}

// Add the given element below the element having the given uuid.
// If the given below_element_with_uuid is not found in the scene, the element
// is added at the top of the scene.
message AddElement {
  optional ElementBundle element = 1;
  optional string below_element_with_uuid = 2;
}

// Remove the element with the given uuid from the scene.
// If the given uuid is not found, this is a no-op.
message RemoveElement {
  optional string uuid = 1;
}

// Set the transform of the element with the given uuid to the given transform.
// If the given element uuid is not found, this is a no-op.
message SetElementTransform {
  optional string uuid = 1;
  optional AffineTransform transform = 2;
}

message SetVisibility {
  optional string uuid = 1;
  optional bool visibility = 2;
}

message SetOpacity {
  optional string uuid = 1;
  // [0-255] (255 is opaque, 0 is transparent.)
  optional int32 opacity = 2;
}

// Move one element "below" the other.
// (This means that it comes earlier in the zorder.)
// A below_uuid of kInvalidUUID means put it on top.
message ChangeZOrder {
  optional string uuid = 1;
  optional string below_uuid = 2;
}
