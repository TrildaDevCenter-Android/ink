// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package ink.proto;

import "ink/proto/elements.proto";
import "ink/proto/geometry.proto";

option javascript_package = "ink.proto";
option java_package = "com.google.ink.proto";
option java_outer_classname = "DocumentProto";

// next id: 2
message Color {
  optional uint32 argb = 1;  // non-premultiplied
}

// Warning: transparent backgrounds are incompatible with the regular eraser
// (should work fine with the whole stroke eraser).
message BackgroundColor {
  optional uint32 rgba = 1;  // non-premultiplied
}

// next id: 6
// Defines the full set of properties for a page.  Always set together as a
// full replacement.  Unset members will clear the corresponding property.
message PageProperties {
  // Background color and image are mutually exclusive.  Image has precedence
  // over color.  If neither is specified, sets the default background color.
  optional Color background_color = 1;
  optional BackgroundImageInfo background_image = 2;

  // Page bounds in world coordinates.  Background image may also have a set of
  // display bounds, which if set will have precedence over these bounds.  If
  // both are unset, the canvas will be infinite.
  optional Rect bounds = 3;

  // Nine-patch border to use for the canvas.  Only visible if page bounds set.
  optional Border border = 4;

  optional GridInfo grid_info = 5;
}

// Per page properties are used when Ink is being run with multiple-page
// support. This is distinct from the PageProperties, which describes
// information about the entire canvas.
//
// NOTE:
// The use of multipage is currently experimental and we do not yet have
// a story for migrating single page-bounded scenes into a multipage scenes.
// Please do not rely on this. Yet.
message PerPageProperties {
  // The uuid for this page. There should be an element that contains
  // the transform for this page with the same uuid. Such elements will be
  // considered GROUP elements.
  optional string uuid = 1;

  // The width for this page.
  optional float width = 2;

  // The height for this page.
  optional float height = 3;
}

// The fields in the various actions are named after the private data members in
// their corresponding StorageAction implementations, with the exception of
// AddMultipleAction which is implemented as "AddAction" in the StorageAction
// implementations. The fields in the various actions are named after the
// private data members in their corresponding StorageAction implementations,
// except for AddAction and AddMultipleAction. AddMultipleAction is implemented
// by the "AddAction" function in the storage layer to encompass adding 1+
// elements at once, and the AddAction proto is now implemented as an
// AddMultipleAction->AddAction of a single element.
message AddAction {
  optional string uuid = 1;
  optional string below_element_with_uuid = 2;
}

message AddMultipleAction {
  repeated string uuid = 1;
  optional string below_element_with_uuid = 2;
}

message RemoveAction {
  repeated string uuid = 1;
  repeated string was_below_uuid = 2;
}

message ReplaceAction {
  repeated string removed_uuid = 1;
  repeated string removed_was_below_uuid = 2;
  repeated string added_uuid = 3;
  repeated string added_was_below_uuid = 4;
}

message ClearAction {
  repeated string uuid = 1;
}

message SetTransformAction {
  repeated string uuid = 1;
  repeated AffineTransform from_transform = 2;
  repeated AffineTransform to_transform = 3;
}

message SetPageBoundsAction {
  optional Rect old_bounds = 1;
  optional Rect new_bounds = 2;
}

message SetVisibilityAction {
  // These MUST all have the same number of elements.
  repeated string uuid = 1;
  repeated bool to_visibility = 2;
  repeated bool from_visibility = 3;
}

message SetOpacityAction {
  // These MUST all have the same number of elements.
  repeated string uuid = 1;
  // Opacity is expressed in the range 0-255, inclusive.
  repeated int32 from_opacity = 2;
  repeated int32 to_opacity = 3;
}

message ChangeZOrderAction {
  // These MUST all have the same number of elements.
  repeated string uuid = 1;
  repeated string from_below_uuid = 2;
  repeated string to_below_uuid = 3;
}

message SetActiveLayerAction {
  optional string from_uuid = 1;
  optional string to_uuid = 2;
}

enum StorageActionState {
  APPLIED = 1;
  UNDONE = 2;
}

message StorageAction {
  // Only one of the following fields ought to be set. We cannot use oneof
  // because nano.
  optional AddAction add_action = 1;
  optional RemoveAction remove_action = 2;
  optional ClearAction clear_action = 3;
  // 4 is unused
  optional SetTransformAction set_transform_action = 5;
  optional SetPageBoundsAction set_page_bounds_action = 6;
  optional AddMultipleAction add_multiple_action = 7;

  optional SetVisibilityAction set_visibility_action = 8;
  optional SetOpacityAction set_opacity_action = 9;
  optional ChangeZOrderAction change_z_order_action = 10;

  optional SetActiveLayerAction set_active_layer_action = 11;
  optional ReplaceAction replace_action = 12;
}
//     ../../../java/com/google/research/ink/service/Mutations.java,
//     ../../../javatests/com/google/research/ink/service/MutationsTest.java,
//     ../public/js/common/util.js,
//     ../public/document/storage/storage_action.h,
//     ../public/document/storage/storage_action.cc,
//     ../public/document/storage/undo_manager.cc,
//     ../public/document/storage/undo_manager_test.cc,
// )

enum ElementState {
  ALIVE = 1;
  DEAD = 2;
}

// A Snapshot is the instantaneous state of a SEngine Document.
message Snapshot {
  optional PageProperties page_properties = 1;
  // EXPERIMENTAL: Adding multi-page support. Order matters, the 0th page is
  // the first page of the document.
  repeated PerPageProperties per_page_properties = 8;
  repeated ElementBundle element = 2;

  // For use by the reconstituted UndoManager.
  repeated ElementBundle dead_element = 3;
  // The 0th StorageAction is the bottom of the stack. In other words, to
  // reconstruct the stack, push each repeated action in order.
  repeated StorageAction undo_action = 4;
  repeated StorageAction redo_action = 5;

  // This index allows the document storage to maintain z-index order of
  // interleaved alive and dead elements.
  repeated ElementState element_state_index = 6;

  // The scene fingerprint (see sketchology/public/fingerprint/fingerprint.h)
  optional uint64 fingerprint = 7;

  // The UUID of the active layer.
  optional string active_layer_uuid = 9;
}

// A MutationPacket contains an ordered sequence of mutations to be applied
// to some Snapshot and an unordered collection of whatever ElementBundles
// are needed to effect those mutations (in particular, AddActions).
message MutationPacket {
  repeated StorageAction mutation = 1;
  repeated ElementBundle element = 2;

  // The current page properties of the source document that produced this
  // packet.
  optional PageProperties page_properties = 3;
}
