// Copyright 2024-2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Proto definitions for delta-coded storage of Ink strokes.

syntax = "proto2";

package ink.proto;

option java_package = "com.google.ink.proto";
option java_outer_classname = "CodedProto";
option objc_class_prefix = "INKPB";

// Efficiently encodes a sequence of numbers, compressed lossily using delta
// coding (but sequences of integers can be represented exactly).  The first
// value in the represented sequence is equal to `offset + scale * deltas[0]`,
// and each successive Nth value is equal to `value[N-1] + scale * deltas[N]`.
//
// When representing a sequence of integers, the `scale` and `offset` fields
// must be integral (or omitted, and their default values used).  Otherwise,
// this can represent a sequence of floating point numbers at whatever level of
// precision yields a good tradeoff between accuracy and gzip-compressibility of
// the delta sequence.
message CodedNumericRun {
  repeated sint32 deltas = 1 [packed = true];
  optional float scale = 2 [default = 1];
  optional float offset = 3;
}

// A struct-of-arrays representing a complete StrokeInputBatch, compressed
// lossily using delta coding. Each numeric run, if present, must have the same
// number of elements (one for each input point).
//
// A StrokeInputBatch and a brush specification together can be used to
// generate a stroke mesh, which can then be rendered to the screen. Once a
// StrokeInputBatch is recorded, it is generally never changed; however, a
// client app can change the brush specification after the fact, allowing a new
// stroke mesh to be generated from the original StrokeInputBatch.
message CodedStrokeInputBatch {
  // The original (pre-stroke-modeler) sequence of input positions for the
  // stroke, in stroke space.  Clients are generally free to define some of the
  // stroke space however they want (e.g. whatever units they want), although in
  // order for stroke modeling and prediction to make sense, it's generally
  // expected that stroke stroke for an in-progress stroke maps to physical
  // space in a straightforward way (isotropic and conformal, i.e. without any
  // nonuniform scaling or angle deformation).
  optional CodedNumericRun x_stroke_space = 1;
  optional CodedNumericRun y_stroke_space = 2;

  // Time elapsed for each input point, measured in seconds from the start of
  // the stroke.
  optional CodedNumericRun elapsed_time_seconds = 3;

  // The stylus/touch pressure for each input point, from zero (inclusive) to 1
  // (inclusive).
  //
  // This field can be omitted for clients that will never use any
  // pressure-sensitive brush tips, or for input streams from sources that don't
  // report pressure (e.g. mouse).
  optional CodedNumericRun pressure = 4;

  // The stylus tilt for each input point, from zero (inclusive) to pi/2
  // (inclusive). A value of zero means that the stylus is perpendicular to the
  // drawing surface, while a value of pi/2 would mean that the stylus was flat
  // against the drawing surface.
  //
  // This field can be omitted for clients that will never use any
  // tilt-sensitive brush tips, or for input streams from sources that don't
  // report tilt (e.g. mouse or touch).
  optional CodedNumericRun tilt = 5;

  // The stylus orientation for each input point, from zero (inclusive) to 2*pi
  // (exclusive). A value of zero means that the ray from the tip of the stylus
  // towards the other end of the stylus points along the positive x-axis, and
  // the orientation angle increases as the stylus moves from the positive
  // x-axis towards the positive y-axis (i.e. counter-clockwise if positive-y is
  // up, or clockwise if positive-y is down).
  //
  // This field can be omitted for clients that will never use any
  // orientation-sensitive brush tips, or for input streams from sources that
  // don't report orientation (e.g. mouse or touch).
  optional CodedNumericRun orientation = 6;

  // The `ToolType` for the entire `Stroke` -- the same value holds for all the
  // individual input points. Maps to `InputToolType` values.
  enum ToolType {
    UNKNOWN_TYPE = 0;
    MOUSE = 1;
    TOUCH = 2;
    STYLUS = 3;
  }
  optional ToolType tool_type = 7;

  // The physical distance that the pointer traveled for each unit of distance
  // in stroke space. For stylus/touch, this is the real-world distance that the
  // stylus/fingertip moved in physical space; for mouse, this is the visual
  // distance that the mouse pointer traveled along the surface of the display.
  //
  // A missing or zero value indicates that the relationship between stroke
  // space and physical space is unknown or ill-defined for this input batch.
  optional float stroke_unit_length_in_centimeters = 8;

  // The seed value that should be used for seeding any noise generators for
  // brush behaviors when a full stroke is regenerated with this input batch.
  optional fixed32 noise_seed = 9;
}

// A 2D mesh; compressed lossily using delta coding.
message CodedMesh {
  // The format that the decoded mesh attributes should be stored in. If this
  // field is absent, the default mesh format (i.e. only an unpacked position
  // attribute) will be assumed by default.
  optional MeshFormat format = 9;

  // A list of vertex indices for mesh triangles.  The first three indices
  // indicate the vertices for the first triangle, then the next three for the
  // second triangle, and so on.  The length of this list must be a multiple of
  // three.
  //
  // This list is non-negative-integer-only (scale=1, offset=0).  However, it
  // turns out that delta-coding is still a (small) win here post-gzip, so we
  // still use CodedNumericRun.
  optional CodedNumericRun triangle_index = 1;

  // Was `outline_index`, use `CodedModeledShape.outlines` instead.
  reserved 2;

  // Mesh vertex positions, in stroke space.  These two lists must be the same
  // length.  The vertices should generally be in whatever order is ideal for
  // rendering performance (e.g. maximizing GPU cache efficiency for triangle
  // data).
  //
  // Typically, a CodedMesh will be stored along with a transformation matrix
  // that maps from the mesh's local coordinate space to the coordinate space of
  // its parent document or grouping.
  optional CodedNumericRun x_stroke_space = 3;
  optional CodedNumericRun y_stroke_space = 4;

  // If the mesh is a solid color, these are omitted.  Otherwise, these store
  // per-vertex color shift data (not absolute color) that is interpreted by the
  // stroke's brush paint when rendering.  If present, each of these lists must
  // have the same length as the vertex lists above.
  optional CodedNumericRun opacity_shift = 5;
  optional CodedNumericRun color_shift_1 = 6;
  optional CodedNumericRun color_shift_2 = 7;
  optional CodedNumericRun color_shift_3 = 8;

  // TODO: b/257503952 - Replace the above position/color fields with a more
  // general `repeated CodedNumericRun attribute_components` field that will
  // contain attribute data for all attributes described by the MeshFormat.
}

// A complete shape, consisting of potentially multiple meshes as well as
// optional outline(s), compressed lossily using delta coding.
message CodedModeledShape {
  // Was `format`, use `group_*` fields instead.
  reserved 1;

  // The meshes that collectively make up this modeled shape. The
  // `CodedMesh.format` field should be omitted from each of these; the
  // `CodedModeledShape.group_formats` field below will be used instead for all
  // meshes in each render group.
  repeated CodedMesh meshes = 2;

  // An optional set of one or more outlines for the shape (which can be used
  // for e.g. path-based rendering). Each outline is encoded as a
  // non-negative-integer-only (scale=1, offset=0) list of 32-bit integers,
  // where the upper 16 bits is an index into the list of meshes for the render
  // group to which the outline belongs, and the lower 16 bits is an index into
  // the vertices of that mesh. (This encoding was chosen so as to make the
  // CodedNumericRun's delta-coding efficient, since most pairs of adjacent
  // outline points will be in the same mesh, and therefore most of the delta
  // integers will be small.)
  repeated CodedNumericRun outlines = 3;

  // The mesh format for each render group in the modeled shape. The number of
  // elements here determines the number of render groups in the shape.
  repeated MeshFormat group_formats = 4;

  // The index into the `meshes` field above for the first mesh in each render
  // group. This must have the same number of elements as the `group_formats`
  // field above.
  repeated uint32 group_first_mesh_indices = 5 [packed = true];

  // The index into the `outlines` field above for the first outline in each
  // render group. This must have the same number of elements as the
  // `group_formats` field above.
  repeated uint32 group_first_outline_indices = 6 [packed = true];
}

// A format specification for mesh data.
message MeshFormat {
  // LINT.IfChange(attribute_types)
  enum AttributeType {
    ATTR_TYPE_UNSPECIFIED = 0;
    ATTR_TYPE_FLOAT_1_UNPACKED = 1;
    ATTR_TYPE_FLOAT_2_UNPACKED = 2;
    ATTR_TYPE_FLOAT_2_PACKED_IN_1_FLOAT = 3;
    ATTR_TYPE_FLOAT_3_UNPACKED = 4;
    ATTR_TYPE_FLOAT_3_PACKED_IN_1_FLOAT = 5;
    ATTR_TYPE_FLOAT_3_PACKED_IN_2_FLOATS = 6;
    ATTR_TYPE_FLOAT_4_UNPACKED = 7;
    ATTR_TYPE_FLOAT_4_PACKED_IN_1_FLOAT = 8;
    ATTR_TYPE_FLOAT_4_PACKED_IN_2_FLOATS = 9;
    ATTR_TYPE_FLOAT_4_PACKED_IN_3_FLOATS = 10;
    ATTR_TYPE_FLOAT_2_PACKED_IN_3_BYTES_XY12 = 11;
    ATTR_TYPE_FLOAT_2_PACKED_IN_4_BYTES_X12_Y20 = 12;
    ATTR_TYPE_FLOAT_1_PACKED_IN_1_BYTE = 13;
    ATTR_TYPE_FLOAT_3_PACKED_IN_4_BYTES_XYZ10 = 14;
  }
  // LINT.ThenChange(../../geometry/mesh_format.h:attribute_types)

  // LINT.IfChange(attribute_id)
  enum AttributeId {
    ATTR_ID_UNSPECIFIED = 0;
    // Values 1-63 are reserved for current and future standard attribute IDs.
    ATTR_ID_POSITION = 1;
    ATTR_ID_COLOR_SHIFT_HSL = 2;
    ATTR_ID_TEXTURE = 3;
    ATTR_ID_SIDE_DERIVATIVE = 4;
    ATTR_ID_SIDE_LABEL = 5;
    ATTR_ID_FORWARD_DERIVATIVE = 6;
    ATTR_ID_FORWARD_LABEL = 7;
    ATTR_ID_OPACITY_SHIFT = 8;
    ATTR_ID_SURFACE_UV = 9;
    ATTR_ID_ANIMATION_OFFSET = 10;
    // Values 64-127 are reserved for custom attribute IDs.  (Note that keeping
    // enum values <= 127 ensures that they will require only one varint byte
    // each in a serialized proto.)
    ATTR_ID_CUSTOM_0 = 64;
    ATTR_ID_CUSTOM_1 = 65;
    ATTR_ID_CUSTOM_2 = 66;
    ATTR_ID_CUSTOM_3 = 67;
    ATTR_ID_CUSTOM_4 = 68;
    ATTR_ID_CUSTOM_5 = 69;
    ATTR_ID_CUSTOM_6 = 70;
    ATTR_ID_CUSTOM_7 = 71;
    ATTR_ID_CUSTOM_8 = 72;
    ATTR_ID_CUSTOM_9 = 73;
  }
  // LINT.ThenChange(../../geometry/mesh_format.h:attribute_id)

  // The size/type of each vertex attribute. This must, at the very least,
  // include a 2-component position attribute.
  repeated AttributeType attribute_types = 1 [packed = true];

  // The ID of each vertex attribute.  This array must be the same length as the
  // attribute_types field. For details on how these values are interpreted, see
  // ../../geometry/mesh_format.h
  repeated AttributeId attribute_ids = 2 [packed = true];
}
